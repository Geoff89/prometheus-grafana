wget https://github.com/prometheus/prometheus/releases/download/v2.45.2/prometheus-2.45.2.linux-amd64.tar.gz
wget https://github.com/prometheus/alertmanager/releases/download/v0.26.0/alertmanager-0.26.0.linux-amd64.tar.gz
wget https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz
wget https://github.com/prometheus/pushgateway/releases/download/v1.6.2/pushgateway-1.6.2.linux-amd64.tar.gz
- sudo apt-get update --fix-missing
- apt-cache policy grafana


sudo useradd \
    --system \
    --no-create-home \
    --shell /bin/false prometheus

- tar -xvf prometheus-2.45.2.linux-amd64.tar.gz
- sudo mkdir -p /data /etc/prometheus
- cd prometheus-2.45.2.linux-amd64
- sudo mv prometheus promtool /usr/local/bin/
# optionally you can move console libraries to the prometheus configuration drectory
#Console templates allow for the creation of arbitrary consoles using the Go templating language. 
- sudo mv consoles/ console_libraries/ /etc/prometheus/

- sudo mv prometheus.yml /etc/prometheus/prometheus.yml
#To avoid permission issues, you need to set correct ownership for the /etc/prometheus/ and data directory
- sudo chown -R prometheus:prometheus /etc/prometheus/ /data/
# create asystemd service for prometheus
- sudo nano /etc/systemd/system/prometheus.service

[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

StartLimitIntervalSec=500
StartLimitBurst=5

[Service]
User=prometheus
Group=prometheus
Type=simple
Restart=on-failure
RestartSec=5s
ExecStart=/usr/local/bin/prometheus \
  --config.file=/etc/prometheus/prometheus.yml \
  --storage.tsdb.path=/data \
  --web.console.templates=/etc/prometheus/consoles \
  --web.console.libraries=/etc/prometheus/console_libraries \
  --web.listen-address=0.0.0.0:9090 \
  --web.enable-lifecyle    

[Install]
WantedBy=multi-user.target  

# for logging user
journalctl -u prometheus -f --no-pager

sudo vim/nano /etc/systemd/system/node_exporter.service

[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target

StartLimitIntervalSec=500
StartLimitBurst=5

[Service]
User=node_exporter
Group=node_exporter
Type=simple
Restart=on-failure
RestartSec=5s
ExecStart=/usr/local/bin/node_exporter \
    --collector.logind

[Install]
WantedBy=multi-user.target

- sudo systemctl enable node_exporter
- sudo systemctl start node_exporter
- sudo systemctl status node_exporter
- journalctl -u node_exporter -f --no-pager

To create a static target, you need to add job_name with static_configs.
- sudo vim /etc/prometheus/prometheus.yml

- in prometheus.yml
...
  - job_name: node_export
    static_configs:
      - targets: ["localhost:9100"]

- promtool check config /etc/prometheus/prometheus.yml

Then, you can use a POST request to reload the config.

- curl -X POST http://localhost:9090/-/reload

- Installig grafana
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
sudo apt update
sudo apt install grafana
sudo systemctl start grafana-server
sudo systemctl start grafana-server
sudo systemctl enable grafana-server

-- create a new data source file
- sudo nano /etc/grafana/provisioning/datasources/datasources.yaml

-- Pushgateway
sudo useradd \
    --system \
    --no-create-home \
    --shell /bin/false pushgateway
- tar -xvf pushgateway-1.4.2.linux-amd64.tar.gz    
- sudo mv pushgateway-1.4.2.linux-amd64/pushgateway /usr/local/bin/
- pushgateway --version
- pushgateway --help
- sudo vim /etc/systemd/system/pushgateway.service
- sudo systemctl enable pushgateway
- sudo systemctl start pushgateway
- sudo systemctl status pushgateway

- promtool check config /etc/prometheus/prometheus.yml
- curl -X POST http://localhost:9090/-/reload

To send metrics to the Pushgateway, you just need to send a POST request to the following endpoint http://localhost:9091/metrics/job/backup. Where backup is an arbitrary name that will show up as a label.
- echo "jenkins_job_duration_seconds 15.98" | curl --data-binary @- http://localhost:9091/metrics/job/backup

- Authentication
- sudo apt-get -y install python3-bcrypt

- nano generate_password.py
- python3 generate_password.py
- $2b$12$lB1fNI04aHwQqFvMxWhemOUrLe5whgJ.aeomIl3fZd7KEGUzx6o.y
- Copy the hash and create an additional prometheus file
- sudo nano /etc/prometheus/web.yml


## Eery time you start a systemd service you need to reload it
- sudo systemctl daemon-reload
- sudo systemctl restart prometheus
- sudo systemctl status prometheus

- Now, we can test basic authentication. Go to Prometheus and reload the page.
- We also need to update the Grafana datasource to provide a username and password

- sudo nano /etc/grafana/provisioning/datasources/datasources.yaml

- If you go to the targets section, you will see that the Prometheus target is down. Prometheus requires a username and password to scrape itself as well. So let's update the Prometheus target.


- promtool check config /etc/prometheus/prometheus.yml
- curl -X POST -u admin:devops123 http://localhost:9090/-/reload

-- AlertManger
sudo useradd \
    --system \
    --no-create-home \
    --shell /bin/false alertmanager

For Alertmanager, we need storage. It is mandatory (it defaults to "data/") and is used to store Alertmanager's notification states and silences. Without this state (or if you wipe it), Alertmanager would not know across restarts what silences were created or what notifications were already sent.
- sudo mkdir -p /alertmanager-data /etc/alertmanager

- move alertmanager binary to the local bin and copy sample config
- sudo mv alertmanager-0.26.0.linux-amd64/alertmanager /usr/local/bin/
- sudo mv alertmanager-0.26.0.linux-amd64/alertmanager.yml /etc/alertmanager/
- rm -rf alertmanager*
- alertmanager --version
- alertmanager --help


-- systemd for alert managers
- sudo nano /etc/systemd/system/alertmanager.service

- sudo systemctl enable alertmanager
- sudo systemctl start alertmanager
- sudo systemctl status alertmanager

- sudo nano /etc/prometheus/dead-mans-snitch-rule.yml

You also need to update the Prometheus config to specify the location of Alertmanager and specify the path to the new rule.


sudo nano /etc/prometheus/prometheus.yml

...
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - localhost:9093
rule_files:
  - dead-mans-snitch-rule.yml

promtool check config /etc/prometheus/prometheus.yml
sudo systemctl restart prometheus
sudo systemctl status prometheus

Alertmanager Slack Channel Integration
- create slack and workspaces and enable webhook url
- sudo nano /etc/alertmanager/alertmanager.yml
- create a new alert rule to test slack intergration
 - sudo nano /etc/prometheus/batch-job-rules.yml

- Trigger the alert by sending the new metric to Prometheus Pushgateway.

- echo "jenkins_job_duration_seconds 31.87" | curl --data-binary @- http://localhost:9091/metrics/job/backup




https://hooks.slack.com/services/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
- https://hooks.slack.com/services/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
